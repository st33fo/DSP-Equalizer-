% All this stuff was generated from the Filter design tool in Matlab
%I am using Generalized Equiripple FIR for the filter. We had talked about
%Kaiser but it didn't seem to intuitive and I wasn't sure how to make the
%Kaiser filter linear phase.

%From quick work, Our 5 center frequencies for the filters should be
%125, 500, 1.125K, 4.75K, 15K 
%I don't mind this but if we want to step up
%to 7 we know it will work, I just tried my best with those values

%As of right now I am designing it as 3 FIR bandpass filters and 1 each of
%lowpass and high pass. I am trying to design it such that the stop band is
%really small, with little variation in the pass band. Once we do this on
%every part of the signal, we can basically just scale the resulting
%outputs based on the sliders, then sum up all of the resulting signals.
%While the attenuated components are getting scales and summed back
%together, the aim is to make these components so small they are
%insignificant in this part. I started with a gain of -60db in stop band
%but we could crank this even higher if we wanted there to be less noise.
%The max ripple I put in the pass band was 0.1 db.

%If the methodology of splitting it up, scaling each band, then adding it
%back together doesn't work, we will need to try something else. Actual
%equalizers use 1st or 2nd order elements at each frequency they listed
%that control the gain at that frequency. I think that is a little simple
%for our purposes, but implementing this functionality in discrete time
%could be pretty cool. I'll keep looking into this stuff but for the mean
%time lets stick with the FIR filters.

function Hd = lowpass125
%LOWPASS125 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 17-Apr-2018 14:20:09

% Generalized REMEZ FIR Lowpass filter designed using the FIRGR function.

% All frequency values are in Hz.
Fs = 44000;  % Sampling Frequency

Fpass = 225;              % Passband Frequency
Fstop = 275;              % Stopband Frequency
Dpass = 0.0057563991496;  % Passband Ripple
Dstop = 0.001;            % Stopband Attenuation
dens  = 20;               % Density Factor

% Calculate the coefficients using the FIRGR function.
b  = firgr('minorder', [0 Fpass Fstop Fs/2]/(Fs/2), [1 1 0 0], [Dpass ...
           Dstop], {dens});
Hd = dfilt.dffir(b);

function Hd = bandpass500
%BETTER500 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 17-Apr-2018 14:35:43

% Generalized REMEZ FIR Bandpass filter designed using the FIRGR function.

% All frequency values are in Hz.
Fs = 44000;  % Sampling Frequency

Fstop1 = 225;              % First Stopband Frequency
Fpass1 = 275;              % First Passband Frequency
Fpass2 = 725;              % Second Passband Frequency
Fstop2 = 775;              % Second Stopband Frequency
Dstop1 = 0.001;            % First Stopband Attenuation
Dpass  = 0.0057563991496;  % Passband Ripple
Dstop2 = 0.001;            % Second Stopband Attenuation
dens   = 20;               % Density Factor

% Calculate the coefficients using the FIRGR function.
b  = firgr('minorder', [0 Fstop1 Fpass1 Fpass2 Fstop2 Fs/2]/(Fs/2), [0 ...
           0 1 1 0 0], [Dstop1 Dpass Dstop2], {dens});
Hd = dfilt.dffir(b);

function Hd = bandpass1125
%BANDPASS1125 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 17-Apr-2018 14:23:10

% Generalized REMEZ FIR Bandpass filter designed using the FIRGR function.

% All frequency values are in Hz.
Fs = 44000;  % Sampling Frequency

Fstop1 = 700;              % First Stopband Frequency
Fpass1 = 800;              % First Passband Frequency
Fpass2 = 1450;             % Second Passband Frequency
Fstop2 = 1550;             % Second Stopband Frequency
Dstop1 = 0.001;            % First Stopband Attenuation
Dpass  = 0.0057563991496;  % Passband Ripple
Dstop2 = 0.001;            % Second Stopband Attenuation
dens   = 20;               % Density Factor

% Calculate the coefficients using the FIRGR function.
b  = firgr('minorder', [0 Fstop1 Fpass1 Fpass2 Fstop2 Fs/2]/(Fs/2), [0 ...
           0 1 1 0 0], [Dstop1 Dpass Dstop2], {dens});
Hd = dfilt.dffir(b);

function Hd = bandpass4750
%BANDPASS4750 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 17-Apr-2018 14:27:27

% Generalized REMEZ FIR Bandpass filter designed using the FIRGR function.

% All frequency values are in Hz.
Fs = 44000;  % Sampling Frequency

Fstop1 = 1450;             % First Stopband Frequency
Fpass1 = 1550;             % First Passband Frequency
Fpass2 = 7950;             % Second Passband Frequency
Fstop2 = 8050;             % Second Stopband Frequency
Dstop1 = 0.001;            % First Stopband Attenuation
Dpass  = 0.0057563991496;  % Passband Ripple
Dstop2 = 0.001;            % Second Stopband Attenuation
dens   = 20;               % Density Factor

% Calculate the coefficients using the FIRGR function.
b  = firgr('minorder', [0 Fstop1 Fpass1 Fpass2 Fstop2 Fs/2]/(Fs/2), [0 ...
           0 1 1 0 0], [Dstop1 Dpass Dstop2], {dens});
Hd = dfilt.dffir(b);

function Hd = highpass15000
%HIGHPASS15000 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 17-Apr-2018 14:31:54

% Generalized REMEZ FIR Highpass filter designed using the FIRGR function.

% All frequency values are in Hz.
Fs = 44000;  % Sampling Frequency

Fstop = 7900;             % Stopband Frequency
Fpass = 8100;             % Passband Frequency
Dstop = 0.001;            % Stopband Attenuation
Dpass = 0.0057563991496;  % Passband Ripple
in    = 4;                % Initial order estimate
dens  = 20;               % Density Factor

% Calculate the coefficients using the FIRGR function.
b  = firgr({'mineven', in}, [0 Fstop Fpass Fs/2]/(Fs/2), [0 0 1 1], ...
           [Dstop Dpass], {dens});
Hd = dfilt.dffir(b);
% [EOF]
